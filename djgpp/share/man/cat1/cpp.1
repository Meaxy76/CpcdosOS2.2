CPP(1)                                GNU                               CPP(1)



NNAAMMEE
       cpp - The C Preprocessor

SSYYNNOOPPSSIISS
       cpp [--DD_m_a_c_r_o[=_d_e_f_n]...] [--UU_m_a_c_r_o]
           [--II_d_i_r...] [--iiqquuoottee_d_i_r...]
           [--MM|--MMMM] [--MMGG] [--MMFF _f_i_l_e_n_a_m_e]
           [--MMPP] [--MMQQ _t_a_r_g_e_t...]
           [--MMTT _t_a_r_g_e_t...]
           _i_n_f_i_l_e [[--oo] _o_u_t_f_i_l_e]

       Only the most useful options are given above; see below for a more
       complete list of preprocessor-specific options.  In addition, ccpppp
       accepts most ggcccc driver options, which are not listed here.  Refer to
       the GCC documentation for details.

DDEESSCCRRIIPPTTIIOONN
       The C preprocessor, often known as _c_p_p, is a _m_a_c_r_o _p_r_o_c_e_s_s_o_r that is
       used automatically by the C compiler to transform your program before
       compilation.  It is called a macro processor because it allows you to
       define _m_a_c_r_o_s, which are brief abbreviations for longer constructs.

       The C preprocessor is intended to be used only with C, C++, and
       Objective-C source code.  In the past, it has been abused as a general
       text processor.  It will choke on input which does not obey C's lexical
       rules.  For example, apostrophes will be interpreted as the beginning
       of character constants, and cause errors.  Also, you cannot rely on it
       preserving characteristics of the input which are not significant to
       C-family languages.  If a Makefile is preprocessed, all the hard tabs
       will be removed, and the Makefile will not work.

       Having said that, you can often get away with using cpp on things which
       are not C.  Other Algol-ish programming languages are often safe
       (Pascal, Ada, etc.) So is assembly, with caution.  --ttrraaddiittiioonnaall--ccpppp
       mode preserves more white space, and is otherwise more permissive.
       Many of the problems can be avoided by writing C or C++ style comments
       instead of native language comments, and keeping macros simple.

       Wherever possible, you should use a preprocessor geared to the language
       you are writing in.  Modern versions of the GNU assembler have macro
       facilities.  Most high level programming languages have their own
       conditional compilation and inclusion mechanism.  If all else fails,
       try a true general text processor, such as GNU M4.

       C preprocessors vary in some details.  This manual discusses the GNU C
       preprocessor, which provides a small superset of the features of ISO
       Standard C.  In its default mode, the GNU C preprocessor does not do a
       few things required by the standard.  These are features which are
       rarely, if ever, used, and may cause surprising changes to the meaning
       of a program which does not expect them.  To get strict ISO Standard C,
       you should use the --ssttdd==cc9900, --ssttdd==cc9999 or --ssttdd==cc1111 options, depending on
       which version of the standard you want.  To get all the mandatory
       diagnostics, you must also use --ppeeddaannttiicc.

       This manual describes the behavior of the ISO preprocessor.  To
       minimize gratuitous differences, where the ISO preprocessor's behavior
       does not conflict with traditional semantics, the traditional
       preprocessor should behave the same way.  The various differences that
       do exist are detailed in the section TTrraaddiittiioonnaall MMooddee.

       For clarity, unless noted otherwise, references to CCPPPP in this manual
       refer to GNU CPP.

OOPPTTIIOONNSS
       The ccpppp command expects two file names as arguments, _i_n_f_i_l_e and
       _o_u_t_f_i_l_e.  The preprocessor reads _i_n_f_i_l_e together with any other files
       it specifies with ##iinncclluuddee.  All the output generated by the combined
       input files is written in _o_u_t_f_i_l_e.

       Either _i_n_f_i_l_e or _o_u_t_f_i_l_e may be --, which as _i_n_f_i_l_e means to read from
       standard input and as _o_u_t_f_i_l_e means to write to standard output.  If
       either file is omitted, it means the same as if -- had been specified
       for that file.  You can also use the --oo _o_u_t_f_i_l_e option to specify the
       output file.

       Unless otherwise noted, or the option ends in ==, all options which take
       an argument may have that argument appear either immediately after the
       option, or with a space between option and argument: --IIffoooo and --II ffoooo
       have the same effect.

       Many options have multi-letter names; therefore multiple single-letter
       options may _n_o_t be grouped: --ddMM is very different from --dd --MM.

       --DD _n_a_m_e
           Predefine _n_a_m_e as a macro, with definition 1.

       --DD _n_a_m_e==_d_e_f_i_n_i_t_i_o_n
           The contents of _d_e_f_i_n_i_t_i_o_n are tokenized and processed as if they
           appeared during translation phase three in a ##ddeeffiinnee directive.  In
           particular, the definition is truncated by embedded newline
           characters.

           If you are invoking the preprocessor from a shell or shell-like
           program you may need to use the shell's quoting syntax to protect
           characters such as spaces that have a meaning in the shell syntax.

           If you wish to define a function-like macro on the command line,
           write its argument list with surrounding parentheses before the
           equals sign (if any).  Parentheses are meaningful to most shells,
           so you should quote the option.  With sshh and ccsshh,
           --DD''_n_a_m_e((_a_r_g_s_._._.))==_d_e_f_i_n_i_t_i_o_n'' works.

           --DD and --UU options are processed in the order they are given on the
           command line.  All --iimmaaccrrooss _f_i_l_e and --iinncclluuddee _f_i_l_e options are
           processed after all --DD and --UU options.

       --UU _n_a_m_e
           Cancel any previous definition of _n_a_m_e, either built in or provided
           with a --DD option.

       --iinncclluuddee _f_i_l_e
           Process _f_i_l_e as if "#include "file"" appeared as the first line of
           the primary source file.  However, the first directory searched for
           _f_i_l_e is the preprocessor's working directory _i_n_s_t_e_a_d _o_f the
           directory containing the main source file.  If not found there, it
           is searched for in the remainder of the "#include "..."" search
           chain as normal.

           If multiple --iinncclluuddee options are given, the files are included in
           the order they appear on the command line.

       --iimmaaccrrooss _f_i_l_e
           Exactly like --iinncclluuddee, except that any output produced by scanning
           _f_i_l_e is thrown away.  Macros it defines remain defined.  This
           allows you to acquire all the macros from a header without also
           processing its declarations.

           All files specified by --iimmaaccrrooss are processed before all files
           specified by --iinncclluuddee.

       --uunnddeeff
           Do not predefine any system-specific or GCC-specific macros.  The
           standard predefined macros remain defined.

       --pptthhrreeaadd
           Define additional macros required for using the POSIX threads
           library.  You should use this option consistently for both
           compilation and linking.  This option is supported on GNU/Linux
           targets, most other Unix derivatives, and also on x86 Cygwin and
           MinGW targets.

       --MM  Instead of outputting the result of preprocessing, output a rule
           suitable for mmaakkee describing the dependencies of the main source
           file.  The preprocessor outputs one mmaakkee rule containing the object
           file name for that source file, a colon, and the names of all the
           included files, including those coming from --iinncclluuddee or --iimmaaccrrooss
           command-line options.

           Unless specified explicitly (with --MMTT or --MMQQ), the object file name
           consists of the name of the source file with any suffix replaced
           with object file suffix and with any leading directory parts
           removed.  If there are many included files then the rule is split
           into several lines using \\-newline.  The rule has no commands.

           This option does not suppress the preprocessor's debug output, such
           as --ddMM.  To avoid mixing such debug output with the dependency
           rules you should explicitly specify the dependency output file with
           --MMFF, or use an environment variable like DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT.
           Debug output is still sent to the regular output stream as normal.

           Passing --MM to the driver implies --EE, and suppresses warnings with
           an implicit --ww.

       --MMMM Like --MM but do not mention header files that are found in system
           header directories, nor header files that are included, directly or
           indirectly, from such a header.

           This implies that the choice of angle brackets or double quotes in
           an ##iinncclluuddee directive does not in itself determine whether that
           header appears in --MMMM dependency output.

       --MMFF _f_i_l_e
           When used with --MM or --MMMM, specifies a file to write the
           dependencies to.  If no --MMFF switch is given the preprocessor sends
           the rules to the same place it would send preprocessed output.

           When used with the driver options --MMDD or --MMMMDD, --MMFF overrides the
           default dependency output file.

       --MMGG In conjunction with an option such as --MM requesting dependency
           generation, --MMGG assumes missing header files are generated files
           and adds them to the dependency list without raising an error.  The
           dependency filename is taken directly from the "#include" directive
           without prepending any path.  --MMGG also suppresses preprocessed
           output, as a missing header file renders this useless.

           This feature is used in automatic updating of makefiles.

       --MMPP This option instructs CPP to add a phony target for each dependency
           other than the main file, causing each to depend on nothing.  These
           dummy rules work around errors mmaakkee gives if you remove header
           files without updating the _M_a_k_e_f_i_l_e to match.

           This is typical output:

                   test.o: test.c test.h

                   test.h:

       --MMTT _t_a_r_g_e_t
           Change the target of the rule emitted by dependency generation.  By
           default CPP takes the name of the main input file, deletes any
           directory components and any file suffix such as ..cc, and appends
           the platform's usual object suffix.  The result is the target.

           An --MMTT option sets the target to be exactly the string you specify.
           If you want multiple targets, you can specify them as a single
           argument to --MMTT, or use multiple --MMTT options.

           For example, --MMTT ''$$((oobbjjppffxx))ffoooo..oo'' might give

                   $(objpfx)foo.o: foo.c

       --MMQQ _t_a_r_g_e_t
           Same as --MMTT, but it quotes any characters which are special to
           Make.  --MMQQ ''$$((oobbjjppffxx))ffoooo..oo'' gives

                   $$(objpfx)foo.o: foo.c

           The default target is automatically quoted, as if it were given
           with --MMQQ.

       --MMDD --MMDD is equivalent to --MM --MMFF _f_i_l_e, except that --EE is not implied.
           The driver determines _f_i_l_e based on whether an --oo option is given.
           If it is, the driver uses its argument but with a suffix of _._d,
           otherwise it takes the name of the input file, removes any
           directory components and suffix, and applies a _._d suffix.

           If --MMDD is used in conjunction with --EE, any --oo switch is understood
           to specify the dependency output file, but if used without --EE, each
           --oo is understood to specify a target object file.

           Since --EE is not implied, --MMDD can be used to generate a dependency
           output file as a side-effect of the compilation process.

       --MMMMDD
           Like --MMDD except mention only user header files, not system header
           files.

       --ffpprreepprroocceesssseedd
           Indicate to the preprocessor that the input file has already been
           preprocessed.  This suppresses things like macro expansion,
           trigraph conversion, escaped newline splicing, and processing of
           most directives.  The preprocessor still recognizes and removes
           comments, so that you can pass a file preprocessed with --CC to the
           compiler without problems.  In this mode the integrated
           preprocessor is little more than a tokenizer for the front ends.

           --ffpprreepprroocceesssseedd is implicit if the input file has one of the
           extensions ..ii, ..iiii or ..mmii.  These are the extensions that GCC uses
           for preprocessed files created by --ssaavvee--tteemmppss.

       --ffddiirreeccttiivveess--oonnllyy
           When preprocessing, handle directives, but do not expand macros.

           The option's behavior depends on the --EE and --ffpprreepprroocceesssseedd options.

           With --EE, preprocessing is limited to the handling of directives
           such as "#define", "#ifdef", and "#error".  Other preprocessor
           operations, such as macro expansion and trigraph conversion are not
           performed.  In addition, the --ddDD option is implicitly enabled.

           With --ffpprreepprroocceesssseedd, predefinition of command line and most builtin
           macros is disabled.  Macros such as "__LINE__", which are
           contextually dependent, are handled normally.  This enables
           compilation of files previously preprocessed with "-E
           -fdirectives-only".

           With both --EE and --ffpprreepprroocceesssseedd, the rules for --ffpprreepprroocceesssseedd take
           precedence.  This enables full preprocessing of files previously
           preprocessed with "-E -fdirectives-only".

       --ffddoollllaarrss--iinn--iiddeennttiiffiieerrss
           Accept $$ in identifiers.

       --ffeexxtteennddeedd--iiddeennttiiffiieerrss
           Accept universal character names in identifiers.  This option is
           enabled by default for C99 (and later C standard versions) and C++.

       --ffnnoo--ccaannoonniiccaall--ssyysstteemm--hheeaaddeerrss
           When preprocessing, do not shorten system header paths with
           canonicalization.

       --ffttaabbssttoopp==_w_i_d_t_h
           Set the distance between tab stops.  This helps the preprocessor
           report correct column numbers in warnings or errors, even if tabs
           appear on the line.  If the value is less than 1 or greater than
           100, the option is ignored.  The default is 8.

       --ffttrraacckk--mmaaccrroo--eexxppaannssiioonn[==_l_e_v_e_l]
           Track locations of tokens across macro expansions. This allows the
           compiler to emit diagnostic about the current macro expansion stack
           when a compilation error occurs in a macro expansion. Using this
           option makes the preprocessor and the compiler consume more memory.
           The _l_e_v_e_l parameter can be used to choose the level of precision of
           token location tracking thus decreasing the memory consumption if
           necessary. Value 00 of _l_e_v_e_l de-activates this option. Value 11
           tracks tokens locations in a degraded mode for the sake of minimal
           memory overhead. In this mode all tokens resulting from the
           expansion of an argument of a function-like macro have the same
           location. Value 22 tracks tokens locations completely. This value is
           the most memory hungry.  When this option is given no argument, the
           default parameter value is 22.

           Note that "-ftrack-macro-expansion=2" is activated by default.

       --ffeexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the execution character set, used for string and character
           constants.  The default is UTF-8.  _c_h_a_r_s_e_t can be any encoding
           supported by the system's "iconv" library routine.

       --ffwwiiddee--eexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the wide execution character set, used for wide string and
           character constants.  The default is UTF-32 or UTF-16, whichever
           corresponds to the width of "wchar_t".  As with --ffeexxeecc--cchhaarrsseett,
           _c_h_a_r_s_e_t can be any encoding supported by the system's "iconv"
           library routine; however, you will have problems with encodings
           that do not fit exactly in "wchar_t".

       --ffiinnppuutt--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the input character set, used for translation from the
           character set of the input file to the source character set used by
           GCC.  If the locale does not specify, or GCC cannot get this
           information from the locale, the default is UTF-8.  This can be
           overridden by either the locale or this command-line option.
           Currently the command-line option takes precedence if there's a
           conflict.  _c_h_a_r_s_e_t can be any encoding supported by the system's
           "iconv" library routine.

       --ffwwoorrkkiinngg--ddiirreeccttoorryy
           Enable generation of linemarkers in the preprocessor output that
           let the compiler know the current working directory at the time of
           preprocessing.  When this option is enabled, the preprocessor
           emits, after the initial linemarker, a second linemarker with the
           current working directory followed by two slashes.  GCC uses this
           directory, when it's present in the preprocessed input, as the
           directory emitted as the current working directory in some
           debugging information formats.  This option is implicitly enabled
           if debugging information is enabled, but this can be inhibited with
           the negated form --ffnnoo--wwoorrkkiinngg--ddiirreeccttoorryy.  If the --PP flag is present
           in the command line, this option has no effect, since no "#line"
           directives are emitted whatsoever.

       --AA _p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
           Make an assertion with the predicate _p_r_e_d_i_c_a_t_e and answer _a_n_s_w_e_r.
           This form is preferred to the older form --AA _p_r_e_d_i_c_a_t_e((_a_n_s_w_e_r)),
           which is still supported, because it does not use shell special
           characters.

       --AA --_p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
           Cancel an assertion with the predicate _p_r_e_d_i_c_a_t_e and answer _a_n_s_w_e_r.

       --CC  Do not discard comments.  All comments are passed through to the
           output file, except for comments in processed directives, which are
           deleted along with the directive.

           You should be prepared for side effects when using --CC; it causes
           the preprocessor to treat comments as tokens in their own right.
           For example, comments appearing at the start of what would be a
           directive line have the effect of turning that line into an
           ordinary source line, since the first token on the line is no
           longer a ##.

       --CCCC Do not discard comments, including during macro expansion.  This is
           like --CC, except that comments contained within macros are also
           passed through to the output file where the macro is expanded.

           In addition to the side-effects of the --CC option, the --CCCC option
           causes all C++-style comments inside a macro to be converted to
           C-style comments.  This is to prevent later use of that macro from
           inadvertently commenting out the remainder of the source line.

           The --CCCC option is generally used to support lint comments.

       --PP  Inhibit generation of linemarkers in the output from the
           preprocessor.  This might be useful when running the preprocessor
           on something that is not C code, and will be sent to a program
           which might be confused by the linemarkers.

       --ttrraaddiittiioonnaall
       --ttrraaddiittiioonnaall--ccpppp
           Try to imitate the behavior of pre-standard C preprocessors, as
           opposed to ISO C preprocessors.

           Note that GCC does not otherwise attempt to emulate a pre-standard
           C compiler, and these options are only supported with the --EE
           switch, or when invoking CPP explicitly.

       --ttrriiggrraapphhss
           Support ISO C trigraphs.  These are three-character sequences, all
           starting with ????, that are defined by ISO C to stand for single
           characters.  For example, ????// stands for \\, so ''????//nn'' is a
           character constant for a newline.

           By default, GCC ignores trigraphs, but in standard-conforming modes
           it converts them.  See the --ssttdd and --aannssii options.

       --rreemmaapp
           Enable special code to work around file systems which only permit
           very short file names, such as MS-DOS.

       --HH  Print the name of each header file used, in addition to other
           normal activities.  Each name is indented to show how deep in the
           ##iinncclluuddee stack it is.  Precompiled header files are also printed,
           even if they are found to be invalid; an invalid precompiled header
           file is printed with ......xx and a valid one with ......!! .

       --dd_l_e_t_t_e_r_s
           Says to make debugging dumps during compilation as specified by
           _l_e_t_t_e_r_s.  The flags documented here are those relevant to the
           preprocessor.  Other _l_e_t_t_e_r_s are interpreted by the compiler
           proper, or reserved for future versions of GCC, and so are silently
           ignored.  If you specify _l_e_t_t_e_r_s whose behavior conflicts, the
           result is undefined.

           --ddMM Instead of the normal output, generate a list of ##ddeeffiinnee
               directives for all the macros defined during the execution of
               the preprocessor, including predefined macros.  This gives you
               a way of finding out what is predefined in your version of the
               preprocessor.  Assuming you have no file _f_o_o_._h, the command

                       touch foo.h; cpp -dM foo.h

               shows all the predefined macros.

           --ddDD Like --ddMM except in two respects: it does _n_o_t include the
               predefined macros, and it outputs _b_o_t_h the ##ddeeffiinnee directives
               and the result of preprocessing.  Both kinds of output go to
               the standard output file.

           --ddNN Like --ddDD, but emit only the macro names, not their expansions.

           --ddII Output ##iinncclluuddee directives in addition to the result of
               preprocessing.

           --ddUU Like --ddDD except that only macros that are expanded, or whose
               definedness is tested in preprocessor directives, are output;
               the output is delayed until the use or test of the macro; and
               ##uunnddeeff directives are also output for macros tested but
               undefined at the time.

       --ffddeebbuugg--ccpppp
           This option is only useful for debugging GCC.  When used from CPP
           or with --EE, it dumps debugging information about location maps.
           Every token in the output is preceded by the dump of the map its
           location belongs to.

           When used from GCC without --EE, this option has no effect.

       --II _d_i_r
       --iiqquuoottee _d_i_r
       --iissyysstteemm _d_i_r
       --iiddiirraafftteerr _d_i_r
           Add the directory _d_i_r to the list of directories to be searched for
           header files during preprocessing.

           If _d_i_r begins with ==, then the == is replaced by the sysroot prefix;
           see ----ssyyssrroooott and --iissyyssrroooott.

           Directories specified with --iiqquuoottee apply only to the quote form of
           the directive, "#include "_f_i_l_e_"_".  Directories specified with --II,
           --iissyysstteemm, or --iiddiirraafftteerr apply to lookup for both the
           "#include "_f_i_l_e_"_" and "#include <_f_i_l_e_>_" directives.

           You can specify any number or combination of these options on the
           command line to search for header files in several directories.
           The lookup order is as follows:

           1.  For the quote form of the include directive, the directory of
               the current file is searched first.

           2.  For the quote form of the include directive, the directories
               specified by --iiqquuoottee options are searched in left-to-right
               order, as they appear on the command line.

           3.  Directories specified with --II options are scanned in left-to-
               right order.

           4.  Directories specified with --iissyysstteemm options are scanned in
               left-to-right order.

           5.  Standard system directories are scanned.

           6.  Directories specified with --iiddiirraafftteerr options are scanned in
               left-to-right order.

           You can use --II to override a system header file, substituting your
           own version, since these directories are searched before the
           standard system header file directories.  However, you should not
           use this option to add directories that contain vendor-supplied
           system header files; use --iissyysstteemm for that.

           The --iissyysstteemm and --iiddiirraafftteerr options also mark the directory as a
           system directory, so that it gets the same special treatment that
           is applied to the standard system directories.

           If a standard system include directory, or a directory specified
           with --iissyysstteemm, is also specified with --II, the --II option is ignored.
           The directory is still searched but as a system directory at its
           normal position in the system include chain.  This is to ensure
           that GCC's procedure to fix buggy system headers and the ordering
           for the "#include_next" directive are not inadvertently changed.
           If you really need to change the search order for system
           directories, use the --nnoossttddiinncc and/or --iissyysstteemm options.

       --II-- Split the include path.  This option has been deprecated.  Please
           use --iiqquuoottee instead for --II directories before the --II-- and remove
           the --II-- option.

           Any directories specified with --II options before --II-- are searched
           only for headers requested with "#include "_f_i_l_e_"_"; they are not
           searched for "#include <_f_i_l_e_>_".  If additional directories are
           specified with --II options after the --II--, those directories are
           searched for all ##iinncclluuddee directives.

           In addition, --II-- inhibits the use of the directory of the current
           file directory as the first search directory for "#include "_f_i_l_e_"_".
           There is no way to override this effect of --II--.

       --iipprreeffiixx _p_r_e_f_i_x
           Specify _p_r_e_f_i_x as the prefix for subsequent --iiwwiitthhpprreeffiixx options.
           If the prefix represents a directory, you should include the final
           //.

       --iiwwiitthhpprreeffiixx _d_i_r
       --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r
           Append _d_i_r to the prefix specified previously with --iipprreeffiixx, and
           add the resulting directory to the include search path.
           --iiwwiitthhpprreeffiixxbbeeffoorree puts it in the same place --II would; --iiwwiitthhpprreeffiixx
           puts it where --iiddiirraafftteerr would.

       --iissyyssrroooott _d_i_r
           This option is like the ----ssyyssrroooott option, but applies only to
           header files (except for Darwin targets, where it applies to both
           header files and libraries).  See the ----ssyyssrroooott option for more
           information.

       --iimmuullttiilliibb _d_i_r
           Use _d_i_r as a subdirectory of the directory containing target-
           specific C++ headers.

       --nnoossttddiinncc
           Do not search the standard system directories for header files.
           Only the directories explicitly specified with --II, --iiqquuoottee,
           --iissyysstteemm, and/or --iiddiirraafftteerr options (and the directory of the
           current file, if appropriate) are searched.

       --nnoossttddiinncc++++
           Do not search for header files in the C++-specific standard
           directories, but do still search the other standard directories.
           (This option is used when building the C++ library.)

       --WWccoommmmeenntt
       --WWccoommmmeennttss
           Warn whenever a comment-start sequence //** appears in a //** comment,
           or whenever a backslash-newline appears in a //// comment.  This
           warning is enabled by --WWaallll.

       --WWttrriiggrraapphhss
           Warn if any trigraphs are encountered that might change the meaning
           of the program.  Trigraphs within comments are not warned about,
           except those that would form escaped newlines.

           This option is implied by --WWaallll.  If --WWaallll is not given, this
           option is still enabled unless trigraphs are enabled.  To get
           trigraph conversion without warnings, but get the other --WWaallll
           warnings, use --ttrriiggrraapphhss --WWaallll --WWnnoo--ttrriiggrraapphhss.

       --WWuunnddeeff
           Warn if an undefined identifier is evaluated in an "#if" directive.
           Such identifiers are replaced with zero.

       --WWeexxppaannssiioonn--ttoo--ddeeffiinneedd
           Warn whenever ddeeffiinneedd is encountered in the expansion of a macro
           (including the case where the macro is expanded by an ##iiff
           directive).  Such usage is not portable.  This warning is also
           enabled by --WWppeeddaannttiicc and --WWeexxttrraa.

       --WWuunnuusseedd--mmaaccrrooss
           Warn about macros defined in the main file that are unused.  A
           macro is _u_s_e_d if it is expanded or tested for existence at least
           once.  The preprocessor also warns if the macro has not been used
           at the time it is redefined or undefined.

           Built-in macros, macros defined on the command line, and macros
           defined in include files are not warned about.

           _N_o_t_e_: If a macro is actually used, but only used in skipped
           conditional blocks, then the preprocessor reports it as unused.  To
           avoid the warning in such a case, you might improve the scope of
           the macro's definition by, for example, moving it into the first
           skipped block.  Alternatively, you could provide a dummy use with
           something like:

                   #if defined the_macro_causing_the_warning
                   #endif

       --WWnnoo--eennddiiff--llaabbeellss
           Do not warn whenever an "#else" or an "#endif" are followed by
           text.  This sometimes happens in older programs with code of the
           form

                   #if FOO
                   ...
                   #else FOO
                   ...
                   #endif FOO

           The second and third "FOO" should be in comments.  This warning is
           on by default.

EENNVVIIRROONNMMEENNTT
       This section describes the environment variables that affect how CPP
       operates.  You can use them to specify directories or prefixes to use
       when searching for include files, or to control dependency output.

       Note that you can also specify places to search using options such as
       --II, and control dependency output with options like --MM.  These take
       precedence over environment variables, which in turn take precedence
       over the configuration of GCC.

       CCPPAATTHH
       CC__IINNCCLLUUDDEE__PPAATTHH
       CCPPLLUUSS__IINNCCLLUUDDEE__PPAATTHH
       OOBBJJCC__IINNCCLLUUDDEE__PPAATTHH
           Each variable's value is a list of directories separated by a
           special character, much like PPAATTHH, in which to look for header
           files.  The special character, "PATH_SEPARATOR", is target-
           dependent and determined at GCC build time.  For Microsoft Windows-
           based targets it is a semicolon, and for almost all other targets
           it is a colon.

           CCPPAATTHH specifies a list of directories to be searched as if
           specified with --II, but after any paths given with --II options on the
           command line.  This environment variable is used regardless of
           which language is being preprocessed.

           The remaining environment variables apply only when preprocessing
           the particular language indicated.  Each specifies a list of
           directories to be searched as if specified with --iissyysstteemm, but after
           any paths given with --iissyysstteemm options on the command line.

           In all these variables, an empty element instructs the compiler to
           search its current working directory.  Empty elements can appear at
           the beginning or end of a path.  For instance, if the value of
           CCPPAATTHH is ":/special/include", that has the same effect as
           --II.. --II//ssppeecciiaall//iinncclluuddee.

       DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT
           If this variable is set, its value specifies how to output
           dependencies for Make based on the non-system header files
           processed by the compiler.  System header files are ignored in the
           dependency output.

           The value of DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT can be just a file name, in which
           case the Make rules are written to that file, guessing the target
           name from the source file name.  Or the value can have the form
           _f_i_l_e _t_a_r_g_e_t, in which case the rules are written to file _f_i_l_e using
           _t_a_r_g_e_t as the target name.

           In other words, this environment variable is equivalent to
           combining the options --MMMM and --MMFF, with an optional --MMTT switch too.

       SSUUNNPPRROO__DDEEPPEENNDDEENNCCIIEESS
           This variable is the same as DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT (see above),
           except that system header files are not ignored, so it implies --MM
           rather than --MMMM.  However, the dependence on the main input file is
           omitted.

       SSOOUURRCCEE__DDAATTEE__EEPPOOCCHH
           If this variable is set, its value specifies a UNIX timestamp to be
           used in replacement of the current date and time in the "__DATE__"
           and "__TIME__" macros, so that the embedded timestamps become
           reproducible.

           The value of SSOOUURRCCEE__DDAATTEE__EEPPOOCCHH must be a UNIX timestamp, defined as
           the number of seconds (excluding leap seconds) since 01 Jan 1970
           00:00:00 represented in ASCII; identical to the output of
           @@ccoommmmaanndd{{ddaattee ++%%ss} on GNU/Linux and other systems that support the
           %s extension in the "date" command.

           The value should be a known timestamp such as the last modification
           time of the source or package and it should be set by the build
           process.

SSEEEE AALLSSOO
       _g_p_l(7), _g_f_d_l(7), _f_s_f_-_f_u_n_d_i_n_g(7), _g_c_c(1), and the Info entries for _c_p_p
       and _g_c_c.

CCOOPPYYRRIIGGHHTT
       Copyright (c) 1987-2017 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3 or
       any later version published by the Free Software Foundation.  A copy of
       the license is included in the man page _g_f_d_l(7).  This manual contains
       no Invariant Sections.  The Front-Cover Texts are (a) (see below), and
       the Back-Cover Texts are (b) (see below).

       (a) The FSF's Front-Cover Text is:

            A GNU Manual

       (b) The FSF's Back-Cover Text is:

            You have freedom to copy and modify this GNU Manual, like GNU
            software.  Copies published by the Free Software Foundation raise
            funds for GNU development.



gcc-7.1.0                         2017-05-02                            CPP(1)
